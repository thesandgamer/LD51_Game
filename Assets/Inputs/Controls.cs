//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Keys"",
            ""id"": ""91804066-0c63-4e6c-81ab-d9f78070e627"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""d6420ec0-1b3a-4659-b260-d6360650abde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Z"",
                    ""type"": ""Button"",
                    ""id"": ""7d4950a8-e6c8-4d43-a06b-f692988621e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""E"",
                    ""type"": ""Button"",
                    ""id"": ""5f254adc-f512-4175-bb93-4ff59d0c2c5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R"",
                    ""type"": ""Button"",
                    ""id"": ""14d0be07-0715-48b3-aeee-77df19ad2fcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""T"",
                    ""type"": ""Button"",
                    ""id"": ""90e38324-89d3-48ee-96bb-2e4eca198920"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""099d3bef-e947-449b-9332-a5369c1fe6aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""U"",
                    ""type"": ""Button"",
                    ""id"": ""da773e4f-494f-46a0-8ebb-117b7ac5f3ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""I"",
                    ""type"": ""Button"",
                    ""id"": ""c41b7739-9174-427c-a8bc-58afdb430d86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""O"",
                    ""type"": ""Button"",
                    ""id"": ""d0818214-4952-4fc9-af1c-08583b3acfc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P"",
                    ""type"": ""Button"",
                    ""id"": ""8c7aed0d-c6d0-4aae-b561-59a39591a5d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Circonflexe"",
                    ""type"": ""Button"",
                    ""id"": ""5ce0c921-189d-4b86-8f42-a146839dfc61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dollard"",
                    ""type"": ""Button"",
                    ""id"": ""a55585d6-c13a-4bc8-960e-fcb566b957b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b7abd686-6ace-48ac-87dd-7332d11c736c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c307bb2-c9dd-4285-b3bf-810c30fbcfb7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75960764-2d08-4ce6-b2ab-c6ac88bf1b7b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a935c298-68a4-42ed-8ec5-41409810acdd"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e827df67-9bc0-46f6-b006-12ae18e46669"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""T"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3814c53-0c45-4d92-8417-95262d9b7a25"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""217309eb-dfc6-41c7-89f4-00abf8f1b364"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""U"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fbb0a9d-aa8d-48e1-9579-2b8158a95021"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""I"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92058a24-3a59-493a-840b-cadcfa2c6297"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""O"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec3a99e5-36d8-4783-bea3-c2d64144365d"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""P"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26260e3a-6676-4e44-925e-2c5b7220322a"",
                    ""path"": ""<Keyboard>/leftBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Circonflexe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfc2c3b6-1f63-409f-bba9-d34f5238161b"",
                    ""path"": ""<Keyboard>/rightBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dollard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Keys
        m_Keys = asset.FindActionMap("Keys", throwIfNotFound: true);
        m_Keys_A = m_Keys.FindAction("A", throwIfNotFound: true);
        m_Keys_Z = m_Keys.FindAction("Z", throwIfNotFound: true);
        m_Keys_E = m_Keys.FindAction("E", throwIfNotFound: true);
        m_Keys_R = m_Keys.FindAction("R", throwIfNotFound: true);
        m_Keys_T = m_Keys.FindAction("T", throwIfNotFound: true);
        m_Keys_Y = m_Keys.FindAction("Y", throwIfNotFound: true);
        m_Keys_U = m_Keys.FindAction("U", throwIfNotFound: true);
        m_Keys_I = m_Keys.FindAction("I", throwIfNotFound: true);
        m_Keys_O = m_Keys.FindAction("O", throwIfNotFound: true);
        m_Keys_P = m_Keys.FindAction("P", throwIfNotFound: true);
        m_Keys_Circonflexe = m_Keys.FindAction("Circonflexe", throwIfNotFound: true);
        m_Keys_Dollard = m_Keys.FindAction("Dollard", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keys
    private readonly InputActionMap m_Keys;
    private IKeysActions m_KeysActionsCallbackInterface;
    private readonly InputAction m_Keys_A;
    private readonly InputAction m_Keys_Z;
    private readonly InputAction m_Keys_E;
    private readonly InputAction m_Keys_R;
    private readonly InputAction m_Keys_T;
    private readonly InputAction m_Keys_Y;
    private readonly InputAction m_Keys_U;
    private readonly InputAction m_Keys_I;
    private readonly InputAction m_Keys_O;
    private readonly InputAction m_Keys_P;
    private readonly InputAction m_Keys_Circonflexe;
    private readonly InputAction m_Keys_Dollard;
    public struct KeysActions
    {
        private @Controls m_Wrapper;
        public KeysActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_Keys_A;
        public InputAction @Z => m_Wrapper.m_Keys_Z;
        public InputAction @E => m_Wrapper.m_Keys_E;
        public InputAction @R => m_Wrapper.m_Keys_R;
        public InputAction @T => m_Wrapper.m_Keys_T;
        public InputAction @Y => m_Wrapper.m_Keys_Y;
        public InputAction @U => m_Wrapper.m_Keys_U;
        public InputAction @I => m_Wrapper.m_Keys_I;
        public InputAction @O => m_Wrapper.m_Keys_O;
        public InputAction @P => m_Wrapper.m_Keys_P;
        public InputAction @Circonflexe => m_Wrapper.m_Keys_Circonflexe;
        public InputAction @Dollard => m_Wrapper.m_Keys_Dollard;
        public InputActionMap Get() { return m_Wrapper.m_Keys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeysActions set) { return set.Get(); }
        public void SetCallbacks(IKeysActions instance)
        {
            if (m_Wrapper.m_KeysActionsCallbackInterface != null)
            {
                @A.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnA;
                @Z.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnZ;
                @Z.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnZ;
                @Z.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnZ;
                @E.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnE;
                @E.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnE;
                @E.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnE;
                @R.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnR;
                @R.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnR;
                @R.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnR;
                @T.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnT;
                @T.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnT;
                @T.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnT;
                @Y.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnY;
                @Y.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnY;
                @Y.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnY;
                @U.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnU;
                @U.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnU;
                @U.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnU;
                @I.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnI;
                @I.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnI;
                @I.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnI;
                @O.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnO;
                @O.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnO;
                @O.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnO;
                @P.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnP;
                @P.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnP;
                @P.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnP;
                @Circonflexe.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnCirconflexe;
                @Circonflexe.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnCirconflexe;
                @Circonflexe.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnCirconflexe;
                @Dollard.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnDollard;
                @Dollard.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnDollard;
                @Dollard.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnDollard;
            }
            m_Wrapper.m_KeysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @Z.started += instance.OnZ;
                @Z.performed += instance.OnZ;
                @Z.canceled += instance.OnZ;
                @E.started += instance.OnE;
                @E.performed += instance.OnE;
                @E.canceled += instance.OnE;
                @R.started += instance.OnR;
                @R.performed += instance.OnR;
                @R.canceled += instance.OnR;
                @T.started += instance.OnT;
                @T.performed += instance.OnT;
                @T.canceled += instance.OnT;
                @Y.started += instance.OnY;
                @Y.performed += instance.OnY;
                @Y.canceled += instance.OnY;
                @U.started += instance.OnU;
                @U.performed += instance.OnU;
                @U.canceled += instance.OnU;
                @I.started += instance.OnI;
                @I.performed += instance.OnI;
                @I.canceled += instance.OnI;
                @O.started += instance.OnO;
                @O.performed += instance.OnO;
                @O.canceled += instance.OnO;
                @P.started += instance.OnP;
                @P.performed += instance.OnP;
                @P.canceled += instance.OnP;
                @Circonflexe.started += instance.OnCirconflexe;
                @Circonflexe.performed += instance.OnCirconflexe;
                @Circonflexe.canceled += instance.OnCirconflexe;
                @Dollard.started += instance.OnDollard;
                @Dollard.performed += instance.OnDollard;
                @Dollard.canceled += instance.OnDollard;
            }
        }
    }
    public KeysActions @Keys => new KeysActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IKeysActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnZ(InputAction.CallbackContext context);
        void OnE(InputAction.CallbackContext context);
        void OnR(InputAction.CallbackContext context);
        void OnT(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnU(InputAction.CallbackContext context);
        void OnI(InputAction.CallbackContext context);
        void OnO(InputAction.CallbackContext context);
        void OnP(InputAction.CallbackContext context);
        void OnCirconflexe(InputAction.CallbackContext context);
        void OnDollard(InputAction.CallbackContext context);
    }
}
